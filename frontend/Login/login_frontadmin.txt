import { Pressable, Text, TextInput, View, Image, ToastAndroid, SafeAreaView } from 'react-native';
import { useState ,useEffect} from 'react';
import { useNavigation } from '@react-navigation/native';
import { Dimensions,ActivityIndicator } from 'react-native';
import styles from './Loginstyle.js';
import * as SecureStore from 'expo-secure-store'; 
import { LinearGradient } from 'expo-linear-gradient';

async function retrieveData() {
  try {
    const email = await SecureStore.getItemAsync('userEmail');
    const token = await SecureStore.getItemAsync('userToken');
    const role = await SecureStore.getItemAsync('userRole');
    console.log('Stored Email:', email);
    console.log('Stored Token:', token);
    console.log('Stored Role:', role);
  } catch (error) {
    console.error('Error retrieving data:', error);
  }
}

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [selectedRole, setSelectedRole] = useState('Admin');
  const [isLoading, setIsLoading] = useState(false);

  const navigation = useNavigation();

  const windowWidth = Dimensions.get('window').width;
  const windowHeight = Dimensions.get('window').height;

  useEffect(() => {
    const checkLoginStatus = async () => {
      try {
        const token = await SecureStore.getItemAsync("userToken");
        const mail = await SecureStore.getItemAsync("userEmail");
        const role = await SecureStore.getItemAsync("userRole");

        if (token && mail && role) {
          navigation.reset({
            index: 0,
            routes: [{ name: role === 'Admin' ? 'adminhome' : 'supporthome' }],
          });
        }
      } catch (error) {
        console.error("Error retrieving token", error);
      } 
    };

    checkLoginStatus();
  }, []);

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePassword = (password) => {
    return password.length >= 4;
  };

  const onSubmit = async () => {
    if (!validateEmail(email)) {
      ToastAndroid.show("Please enter a valid email address.", ToastAndroid.SHORT);
      return;
    }
    if (!validatePassword(password)) {
      ToastAndroid.show("Password must be at least 4 characters long.", ToastAndroid.SHORT);
      return;
    }

    setIsLoading(true);
    
    try {
      const response = await fetch("http://192.168.1.22:4000/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password, role: selectedRole }),
      });

      const data = await response.json();
      
      if (response.ok) {
        ToastAndroid.show("Login successful!", ToastAndroid.SHORT);

        await SecureStore.setItemAsync('userEmail', email);
        await SecureStore.setItemAsync('userToken', data.token);
        await SecureStore.setItemAsync('userRole', data.user.role);
        
        retrieveData();
    
        // Navigate based on role
        if (data.user.role === 'Admin') {
          navigation.reset({
            index: 0,
            routes: [{ name: 'adminhome' }],
          });
        } else {
          navigation.reset({
            index: 0,
            routes: [{ name: 'supporthome' }],
          });
        }
      } else {
        ToastAndroid.show(data.error || "Invalid credentials", ToastAndroid.SHORT);
      }
    } catch (error) {
      console.error("Login error:", error);
      ToastAndroid.show("Login Failed, Try again later.", ToastAndroid.SHORT);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={['#88d3ce', '#ebb8ff']}
        style={styles.gradientBackground}
      >
        <View style={styles.logoContainer}>
          <Image 
            source={{ uri: "https://renambl.blr1.cdn.digitaloceanspaces.com/rcoders/web/Rencoders_logo.png" }} 
            style={[styles.logo, { width: windowWidth * 0.6, height: windowHeight * 0.2 }]} 
          />
          <Text style={styles.appSubtitle}>
            Start Learning and Embrace New Skills for Better Future!!
          </Text>
        </View>
      </LinearGradient>

      <View style={styles.box}>
        <Text style={styles.welcomeText}>Welcome Back</Text>

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.inpt}
            placeholder='user@gmail.com'
            placeholderTextColor="#999"
            onChangeText={(text) => setEmail(text)}
            value={email}
            keyboardType="email-address"
          />
        </View>

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.inpt}
            placeholder='Password'
            placeholderTextColor="#999"
            secureTextEntry={true}
            onChangeText={(text) => setPassword(text)}
            value={password}
          />
        </View>
        
        <View style={styles.roleContainer}>
          <Pressable
            style={[
              styles.roleButton,
              selectedRole === 'Admin' ? styles.selectedButton : styles.unselectedButton,
            ]}
            onPress={() => setSelectedRole('Admin')}
          >
            <Text style={styles.buttonText}>Admin</Text>
          </Pressable>

          <Pressable
            style={[
              styles.roleButton,
              selectedRole === 'Support' ? styles.selectedButton : styles.unselectedButton,
            ]}
            onPress={() => setSelectedRole('Support')}
          >
            <Text style={styles.buttonText}>Support</Text>
          </Pressable>
        </View>

        <Pressable
          style={styles.button}
          onPress={onSubmit}
          disabled={isLoading}
        >
          {isLoading ? (
            <ActivityIndicator color="#fff" />
          ) : (
            <Text style={styles.buttonText}>Log in</Text>
          )}
        </Pressable>

        

        <View style={styles.dividerContainer}>
          <View style={styles.dividerLine} />
          <Text style={styles.dividerText}>or</Text>
          <View style={styles.dividerLine} />
        </View>

        <Pressable onPress={() => navigation.navigate('SignUp')}>
          <Text style={styles.signUpText}>Sign up</Text>
        </Pressable>
      </View>
    </View>
  );
}

