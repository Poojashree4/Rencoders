import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import * as SecureStore from 'expo-secure-store';

const TicketsScreen = ({ ip }) => {
  const [tickets, setTickets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [userRole, setUserRole] = useState(null);
  const navigation = useNavigation();

  useEffect(() => {
    fetchTickets();
  }, [ip]);

  const fetchTickets = async () => {
    try {
      const token = await SecureStore.getItemAsync('userToken');
      const role = await SecureStore.getItemAsync('userRole');
      setUserRole(role);

      console.log("Fetching tickets with token:", token);

      const response = await fetch(`${ip}/getAllTickets`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token })
      });
      
      const data = await response.json();
      console.log("Tickets response:", data);

      if (response.ok) {
        setTickets(data);
      } else {
        console.error('Failed to fetch tickets:', data.error);
      }
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderTicketItem = ({ item }) => (
    <TouchableOpacity 
      style={styles.ticketItem}
      onPress={() => navigation.navigate('TicketChat', { 
        ticketId: item._id,
        ip: ip 
      })}
    >
      <Text style={styles.ticketTitle}>{item.title}</Text>
      <Text style={styles.ticketStatus}>Status: {item.status}</Text>
      <Text style={styles.ticketMeta}>
        Created by: {item.createdBy.role} ({item.createdBy.roleID})
      </Text>
      <Text style={styles.ticketMeta}>
        Assigned to: {item.assignedTo.role} ({item.assignedTo.roleID})
      </Text>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <FlatList
        data={tickets}
        renderItem={renderTicketItem}
        keyExtractor={(item) => item._id}
        contentContainerStyle={styles.listContainer}
      />
    </View>
  );
};

// ... (keep your existing styles)
//ticket first screen
import React, { useState, useEffect, useRef } from 'react';
import { View, Text, TextInput, TouchableOpacity, FlatList, StyleSheet, KeyboardAvoidingView, Platform } from 'react-native';
import * as SecureStore from 'expo-secure-store';
import io from 'socket.io-client';

const TicketChatScreen = ({ route }) => {
  const { ticketId, ip } = route.params;
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [socket, setSocket] = useState(null);
  const flatListRef = useRef();

  useEffect(() => {
    const setupSocketAndFetchMessages = async () => {
      try {
        const token = await SecureStore.getItemAsync('userToken');
        const userId = await SecureStore.getItemAsync('userId');
        const userRole = await SecureStore.getItemAsync('userRole');
        
        console.log("User data from SecureStore:", { userId, userRole });

        setUser({
          id: userId,
          role: userRole
        });

        // Setup WebSocket connection
        const newSocket = io(ip, {
          query: { token },
          transports: ['websocket']
        });

        newSocket.on('connect', () => {
          console.log('Connected to socket');
          newSocket.emit('joinTicket', ticketId);
        });

        newSocket.on('newMessage', (message) => {
          setMessages(prev => [...prev, message]);
          scrollToBottom();
        });

        setSocket(newSocket);

        // Fetch existing messages
        const response = await fetch(`${ip}/getChats`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            token,
            ticketId 
          })
        });

        const data = await response.json();
        console.log("Chats response:", data);

        if (response.ok) {
          setMessages(data.chats || []);
        } else {
          console.error('Failed to fetch chats:', data.error);
        }
      } catch (error) {
        console.error('Error:', error);
      } finally {
        setLoading(false);
      }
    };

    setupSocketAndFetchMessages();

    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, [ticketId, ip]);

  const scrollToBottom = () => {
    if (flatListRef.current && messages.length > 0) {
      flatListRef.current.scrollToEnd({ animated: true });
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !user || !socket) return;

    const token = await SecureStore.getItemAsync('userToken');
    const messageData = {
      ticketId,
      message: newMessage,
      senderId: user.id,
      senderRole: user.role,
      timestamp: new Date().toISOString()
    };

    try {
      console.log("Sending message:", messageData);
      
      // Send via socket for real-time
      socket.emit('sendMessage', messageData);
      
      // Also send to API for persistence
      const response = await fetch(`${ip}/addChat/${ticketId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          token,
          ...messageData
        })
      });

      const data = await response.json();
      console.log("Add chat response:", data);

      if (!response.ok) {
        throw new Error(data.error || 'Failed to send message');
      }

      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  // ... (rest of your component remains the same)
};

// ... (keep your existing styles)

//backend for ticket screen with token
// Example endpoint (getAllTickets)
app.post('/getAllTickets', async (req, res) => {
  const { token } = req.body;

  try {
    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    let client = await connect();
    const db = client.db('Rencoders');
    const ticketsColl = db.collection('tickets');

    const tickets = await ticketsColl.find({}).toArray();
    res.status(200).json(tickets);
  } catch (error) {
    console.error('Error fetching all tickets:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Similarly update other endpoints to accept token in body