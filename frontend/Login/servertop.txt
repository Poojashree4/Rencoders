
// Add this near the top of your file
// const JWT_SECRET = process.env.JWT_SECRET ;

// const express = require("express");
// const { MongoClient } = require("mongodb");
// const cors = require("cors");
// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const validator = require("validator");
// const Joi = require("joi");
// require('dotenv').config();
// const speakeasy = require('speakeasy');
//  const nodemailer = require('nodemailer') ;




// const app = express();
// app.use(cors());
// app.use(express.json());

// const uri = "mongodb://localhost:27017/Rencoders";
// let client;

// const transporter = nodemailer.createTransport({
//   service: 'gmail',
//   auth: {
//     user: process.env.EMAIL, // your email
//     pass: process.env.EMAIL_PASS // app password (not normal email password)
//   }
// });


// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader && authHeader.split(' ')[1]; 

//   if (!token) {
//     return res.status(401).json({ error: "No token provided" });
//   }

//   jwt.verify(token, JWT_SECRET, (err, user) => {
//     if (err) {
//       return res.status(403).json({ error: "Invalid token" });
//     }
//     req.user = user; 
//     next(); 
//   });
// };

// // const authenticateToken = (req, res, next) => {
// //   const authHeader = req.headers['authorization'];
// //   const token = authHeader && authHeader.split(' ')[1]; 

// //   if (!token) {
// //     return res.status(401).json({ error: "No token provided" });
// //   }

// //   jwt.verify(token, JWT_SECRET, (err, decoded) => {
// //     if (err) {
// //       return res.status(403).json({ error: "Invalid or expired token" });
// //     }
// //     req.user = decoded; // Store decoded user info in request
// //     next();
// //   });
// // };
// app.get('/protected', authenticateToken, (req, res) => {
//   res.status(200).json({ message: "Access granted to protected route" });
// });




// // const loginSchema = Joi.object({
// //   email: Joi.string().email().required(),
// //   password: Joi.string().min(4).required(),
// //   role: Joi.string().valid('Admin', 'Support').required()
// // });

// app.post('/login', async (req, res) => {
//   let client;
//   try {
//     const { error, value } = loginSchema.validate(req.body, { abortEarly: false });

//     if (error) {
//       return res.status(400).json({ error: error.details.map((err) => err.message) });
//     }

//     client = await connect();
//     const userCol = client.db("Rencoders").collection("users");
//     const { email, password, role } = value;

//     const user = await userCol.findOne({ email });
//     if (!user) {
//       return res.status(401).json({ error: "User not found" });
//     }

//     const isPasswordValid = await bcrypt.compare(password, user.password);
//     if (!isPasswordValid) {
//       return res.status(401).json({ error: "Invalid password" });
//     }

//     // role matches
//     if (user.role !== role) {
//       return res.status(403).json({ error: "Incorrect role selected" });
//     }
//     console.log("Login request received:", req.body);
//     console.log("User found in DB:", user);
//     console.log("Comparing password...");
//     console.log("Expected role:", role, " | User role:", user.role);
    
//     const token = createToken(user._id);

//     res.status(200).json({
//       message: "Login successful",
//       token,
//       user: {
//         name: user.name,
//         email: user.email,
//         role: user.role
//       }
      
//     });

//   } catch (error) {
//     console.error("Login error:", error.message);
//     res.status(500).json({ error: "Server Error", details: error.message });
  
  
//   } finally {
//     if (client) {
//       await client.close();
//     }
//   }
// });